unit U_Utilitarios;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, StrUtils, IniFiles, Vcl.Buttons,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client;

type
  TForm_Utilitarios = class(TForm)
    CdClienteSalvo: TFDMemTable;
    CdClienteSalvoCD_CLIFORSALVO: TIntegerField;
  Procedure AbreTela(NomeForm: TFormClass ; limpa : Boolean);
  Procedure prcGravarArquivoINI(Caminho: String);
  Function fncLerArquivoINI: String;
  Procedure mouseHover(objbotao : TSpeedButton; style : boolean);
  Function CodificarSenha(CodSenha: String): String;
  function DecodificarSenha(SenhaCodificada: String): String;

  private
    { Private declarations }
  public
    { Public declarations }

  end;

var
  Form_Utilitarios: TForm_Utilitarios;

implementation

uses U_Usuarios, U_Clientes, U_DM, U_Empresa, U_Padrao;

{$R *.dfm}

procedure TForm_Utilitarios.AbreTela(NomeForm: TFormClass; limpa : Boolean);
begin
  with NomeForm do
  begin
    try
      TForm(NomeForm) := NomeForm.Create(self);
      TForm(NomeForm).ShowModal;
    finally
      if limpa then
      begin
        TForm(NomeForm).Free;
        TForm(NomeForm) := nil;
      end;
    end;
  end;

end;

function TForm_Utilitarios.fncLerArquivoINI: String;
var
  iniFile, FServidor: String;
  ini : TiniFile;
begin
  iniFile := ChangeFileExt( Application.Exename, '.ini' );
  ini     := TIniFile.Create( iniFile );
  try
    FServidor := ini.ReadString('Configuração', 'Servidor', '');
  finally
    Result := FServidor;
    ini.Free;
  end;

end;


procedure TForm_Utilitarios.mouseHover(objbotao: TSpeedButton; style: boolean);
begin
  if style then
  begin
    if objbotao.Font.Size < 11  then
    begin
      objbotao.Font.Size := objbotao.Font.Size + 1;
      objbotao.Font.Color := clGreen;
    end;
  end else
  begin
    if objbotao.Font.Size > 10 then
    begin
      objbotao.Font.Size := objbotao.Font.Size - 1;
      objbotao.Font.Color := clBlack;
    end;

  end;
end;

procedure TForm_Utilitarios.prcGravarArquivoINI(Caminho: String);
var
  iniFile: String;
  ini : TiniFile;
  begin
    iniFile := ChangeFileExt( Application.Exename, '.ini' );
    ini     := TIniFile.Create( iniFile );
    try
      ini.WriteString('Configuração', 'Servidor', Caminho);
    finally
      ini.Free;
    end;
end;

function CodificarSenha(CodSenha: string): string;
const
  MapaSubstituicao: array ['A'..'Z'] of Char =
    ('F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'A', 'B', 'C', 'D', 'E');
var
  i: Integer;
begin
  Result := '';
  for i := 1 to Length(CodSenha) do
    if UpCase(CodSenha[i]) in ['A'..'Z'] then
      Result := Result + MapaSubstituicao[UpCase(CodSenha[i])]
    else
      Result := Result + CodSenha[i];
end;

function DecodificarSenha(SenhaCodificada: string): string;
const
  MapaSubstituicao: array ['A'..'Z'] of Char =
    ('F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'A', 'B', 'C', 'D', 'E');
var
  i: Integer;
begin
  Result := '';
  for i := 1 to Length(SenhaCodificada) do
    if UpCase(SenhaCodificada[i]) in ['A'..'Z'] then
      Result := Result + MapaSubstituicao[UpCase(SenhaCodificada[i])]
    else
      Result := Result + SenhaCodificada[i];
end;

end.

